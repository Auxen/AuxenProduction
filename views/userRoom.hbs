<style>
@media only screen
and (min-device-width : 320px)
and (max-device-width : 480px) {

  #request {
    width: 100% !important;
  }
}




</style>


<div>
  <div class="row">
    <div class="col-md-2">
      <h1 data-id="{{room.roomName}}" style="margin-left: 5%; margin-right: 5%;"class="leaveRoom text-center text small boxed raise" id="userLeave" data-url="/leaveRoom?roomId={{room._id}}">Leave</h1>
    </div>
    <div class="col-md-offset-1 col-md-6">
      <h1 class="text-center standard-text middle animated slideInDown">{{room.roomName}}</h1>

      <div id="djphoto" class='center'>
        <img src="{{room.imageURL}}" class="img-responsive animated wobble phone" style="border-radius: 50%; width: 20%; height: 20%;" >
      </div>
      <h2 id="djstatus" class="text-center standard-text small">DJ is: {{room.djName}}</h2>
      <div id="currentSong" class="center">
        <img src="/static/images/loading.gif" class="img-responsive" style="width: 5%; height: 5%;"></img>
      </div>
    </div>
  </div>
  <div id="laflame-container">
    <h1 id="laflame" class="center floating pointer" >
      🔥
    </h1>
  </div>
  <div class="center">
    <h1 style=""class="text-center text small boxed raise" data-toggle="modal" data-target="#exampleModalLong">Request Songs</h1>
  </div>
    <div class="activeUsersforUser">
      <div id="users" class="grid">
      {{#each room.usersInRoom}}
        <div id="{{this.spotifyId}}" >
            <div data-id="{{this.spotifyId}}" >
              <img class="raise animated bounceIn grid-item" src="{{this.imageURL}}" alt="">
            </div>
        </div>
      {{/each}}
      </div>
    </div>
</div>

<div class="modal fade" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true" style="background-color: #1E1D1D">
    <div class="modal-dialog" role="document"  style="background-color: #1E1D1D">
      <div>
        <div class="modal-header" style="background-color: #1E1D1D">
          <h2 class="modal-title text-center standard-text" id="exampleModalLongTitle">Request a song</h2>
        </div>
        <form autocomplete="off" id="requestform">
          <input maxlength="35" id="requestval" style="border: none; font-size: 20px;" placeholder="Taking song requests..." class="ghost-input"></input>
        </form>
        <div class="modal-footer"  style="background-color: #1E1D1D">
          <h1 id="request" class="text-center text small boxed raise" style="width: 20%; " data-dismiss="modal">Submit</h1>
        </div>
      </div>
    </div>
  </div>

<div class="center" id="flames"></div>

<script type="text/javascript" src="/static/scripts/float.js"></script>

<!-- <script src="/static/user.js"></script> -->

<script type="text/javascript">
var roomName = '{{room.roomName}}';
console.log("roomName", roomName);
var roomId = '{{room._id}}';
console.log("roomid", roomId);
var socket = io();
var clearId = -1;
var isDJ = false;
var djName = '{{room.djName}}'

function pausePlayback(){
  $.ajax({
    url: 'https://api.spotify.com/v1/me/player/pause',
    method: 'put',
    headers: {
        'Authorization': 'Bearer ' + localStorage.getItem("accessToken")
    },
    success: function(){
      console.log("successfully paused.");
    }
  })
}


var isSafari = navigator.vendor && navigator.vendor.indexOf('Apple') > -1 &&
                  navigator.userAgent && !navigator.userAgent.match('CriOS');

if(isSafari){

  $(window).ready(function(){
      console.log("test");
      if (window.history && window.history.pushState) {
        $(window).on('popstate', function() {
          var hashLocation = location.hash;
          var hashSplit = hashLocation.split("#!/");
          var hashName = hashSplit[1];
          console.log(hashName);
          if(location.pathname === `/userRoom/${roomId}`){
            console.log("location here");
            window.location.href = '/';
          }
          if (hashName !== '') {
            var hash = window.location.hash;
                  console.log(hash)
            if (hash === '') {
              console.log("unloading safari");
                  var userObject = {roomId: roomId, spotifyId:localStorage.getItem("spotifyId")};
                socket.emit('specialLeave', userObject);
              localStorage.setItem("disconnectTime", new Date().getTime());
              clearInterval(clearId);
              socket.emit('leaveRoom', userObject.spotifyId);
              //window.location.href = '/';
            }
            console.log('hashname',hashName)
          }
        });
    window.history.pushState('forward', null, `./${roomId}#`);
      }
    });

}
  /* happens on refresh and close tab */
  $(window).on("unload", function(){
    console.log("unloading");
     window.location = '/';
    var userObject = {roomId: roomId, spotifyId:localStorage.getItem("spotifyId")};
    console.log("***********user object*************", userObject);
    socket.emit('specialLeave', userObject);
    localStorage.setItem("disconnectTime", new Date().getTime());
    clearInterval(clearId);
  });


 /* user sends request */
$('#request').on('click', function() {
  var request = $('#requestval').val();
  $('#requestval').val('');
  console.log("******",request);
  socket.emit('userTalk', request);
});

$('#requestform').on('submit', function(e) {
  e.preventDefault();
  console.log("entering heree");
  $('#request').click();
})

/* user sends flames */
$('#laflame').on('click', function() {
  socket.emit('laflame');
})










/////////////////////////////

/* if user wants to leave room it comes here */
$('#userLeave').on('click', function(event){
  console.log("********",isDJ, roomName);
  if(isDJ === true){
    console.log("entered here");
    socket.emit('userDJLeaving', roomName);
  }
  socket.emit('leaveRoom', localStorage.getItem("spotifyId"));
  pausePlayback();
  window.location = $(this).attr('data-url');
})

socket.on('changedDJ', function(djObject){
  console.log(djObject.spotifyId);
  if(djObject.spotifyId === localStorage.getItem('spotifyId')) {
    $('#djstatus').text('You were passed the aux!')
    isDJ = true;
  } else {
    $('#djstatus').text(`${djObject.username} was passed the aux`);
    isDJ = false;
  }
})

socket.on('takenBack', function(){
  if(isDJ)isDJ = false;
  $('#djstatus').text(`DJ is: ${djName}`);
})

////////////////////////////











/* Checking connnection to socket */
socket.on('connect', function(){

  console.log('Connected!');

  clearId = setInterval(function () {
    socket.emit("toRefresh", localStorage.getItem("refreshToken"));
  }, 30*60000 );

  var userObject = {
    roomId: roomId,
    roomName: roomName,
    spotifyId: localStorage.getItem('spotifyId'),
    imageURL: localStorage.getItem('imageURL'),
    username: localStorage.getItem('username')
  }

  if(localStorage.getItem("disconnectTime") && (new Date().getTime() - localStorage.getItem("disconnectTime") < 3000)){
      console.log("this was a refresh");
      console.log("userObject", userObject);
      socket.emit("userRefreshed", userObject);
      localStorage.removeItem("disconnectTime");
  }
  else{
    console.log("new room joined without refresh");
    socket.emit('joinRoom', userObject);
  }
});

/* sets new access token after refresh */
socket.on('setNewAccessToken', function(accessToken){
  localStorage.setItem('accessToken', accessToken);
})

/* if dj closes room it will come here and redirect to home after leavingRoom */
socket.on('roomClosed', function(){
  socket.emit('leaveRoom');
  alert('Sorry, the dj closed the room');
  window.location = '/';
})

/* new user has joined */
socket.on('userJoined', function(userData){
  console.log("userJoined", userData);
    if($('#' + userData.spotifyId).length !== 0){
      console.log("this guy exits", userData);
      return;
    }else {

       var data = `<div id="${userData.spotifyId}" >
           <div data-id="${userData.spotifyId}" >
             <img class="raise animated bounceIn grid-item" src="${userData.imageURL}" alt="">
           </div>
       </div>`
       $('#users').append(data);

    }

});

/* some other user has left room */
socket.on('userLeaving', function(userSpotifyId){
  console.log("userLeaving", userSpotifyId);
  $('#' + userSpotifyId).remove();
});

/* get dj setting info and configure users spotify */
socket.on('DJData', function(DJData){
  if(!isDJ){
    var timeProgress = DJData.timeProgress;
    var songURI = DJData.songURI;
    $.ajax({
      url: 'https://api.spotify.com/v1/me/player/play',
      method: 'PUT',
      headers: {
        'Authorization': 'Bearer ' + localStorage.getItem("accessToken"),
        'Content-Type': "application/json"
      },
      data: JSON.stringify({
        "uris": [songURI]
      }),
      dataType: "JSON",
      success: function(data){
        $.ajax({
          url: `https://api.spotify.com/v1/me/player/seek?position_ms=${timeProgress}`,
          headers: {
              'Authorization': 'Bearer ' + localStorage.getItem("accessToken")
            },
          method: 'PUT',
          json: true,
          success: function (something) {
              console.log("song successfully changed or modified");
          }
        })
      }
    })
  }
  var songName= DJData.songName;
  $('#currentSong').empty();
  $('#currentSong').append(`<h2 id="currentSong" style="font-size: 14px;" class="text-center standard-text small  no-margin animated fadeIn">Currently playing : ${songName}</h2>`);
})

/* listens for dj message */
socket.on('djTalk', function(data) {
    $('#flames').append(`
      <p class="request small text" style="position: absolute; color: green; left:${Math.floor(100 * Math.random())}%">
          <span style="width: 50%;">${data}</span>
      </p>
    `)
    setTimeout(function() {
      $('#flames').find('p:first').remove();
    }, 8000)
  });

/* listens for dj thanks */
socket.on('sendgrace', function() {
  $('#flames').append(`
    <span class="small fire" style="position: absolute; left:${Math.floor(100 * Math.random())}%">
        🙏
    </span>
  `)
  setTimeout(function() {
    $('#flames').find('span:first').remove();
  }, 2000)
})

/* listens to requests in room */
socket.on('userTalk', function(data){
  console.log("reached here ");
  $('#flames').append(`
    <p class="request small text" style="position: absolute; left:${Math.floor(100 * Math.random())}%">
        <span style="width: 30%;">${data}</span>
    </p>
  `)

  setTimeout(function() {
    $('#flames').find('p:first').remove();
  }, 8000)
});

/* listens to flames in room */
socket.on('laflame', function() {
  $('#flames').append(`
      <span class="small fire" style="position: absolute; left:${Math.floor(100 * Math.random())}%">
          🔥
      </span>
    `)
    setTimeout(function() {
      $('#flames').find('span:first').remove();
    }, 2000)
})
</script>
