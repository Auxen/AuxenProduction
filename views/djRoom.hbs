<style>
@media only screen
and (min-device-width : 320px)
and (max-device-width : 480px) {
  .grid-item {
    box-sizing: border-box;
    width: 200px;
    height: 200px;
    overflow: hidden;
    float: left;
    border-radius: 50%;
    margin: 20px 10px 10px 10px;
    margin-top: 10px;
}

#djtalk {
  width: 100% !important;
}
}
</style>

<div>
  <div class="row">
    <div class="col-md-2">
      <h1 data-id="{{room.roomName}}" style="margin-left: 5%; margin-right: 5%;"class="closeRoom text-center text small boxed raise" id="closeRoom" data-url='/closeRoom/{{room.roomName}}?roomId={{room._id}}'>Close</h1>
    </div>
    <div class="col-md-offset-1 col-md-6">
      <h1 class="text-center standard-text middle animated slideInDown">{{room.roomName}}</h1>

      <div id="djphoto" class='center'>
        <img src='{{room.imageURL}}' class="img-responsive animated wobble" style="border-radius: 50%; width: 20%; height: 20%;" >
      </div>
      <h2 class="text-center standard-text small">You are the DJ</h2>
      <div id="currentSong" class="center">
        <img src="/static/images/loading.gif" class="img-responsive" style="width: 5%; height: 5%;"></img>
      </div>
      <div class="center">
        <h1 id="pass" style="font-size: 10px; margin-top: 1%; cursor: pointer;" class="text-center grow text small" data-toggle="modal" data-target="#passDJ">Pass DJ</h1>
      </div>
    </div>
  </div>
  <div id="sendgrace-container">
    <h1 id="sendgrace" class="center floating pointer" >
      üôè
    </h1>
  </div>
  <div class="center">
    <h1 style=""class="text-center text small boxed raise" data-toggle="modal" data-target="#exampleModalLong">Show Love</h1>
  </div>

    <div class="activeUsersforDJ ">
      <div id="users" class="grid">

      </div>
    </div>

  <div class="center" id="flames"></div>

  <div class="modal fade" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true" style="background-color: #1E1D1D">
    <div class="modal-dialog" role="document"  style="background-color: #1E1D1D">
      <div>
        <div class="modal-header" style="background-color: #1E1D1D">
          <h2 class="modal-title text-center standard-text" id="exampleModalLongTitle">Show your listeners some love</h2>
        </div>
          <form autocomplete="off" id="djtalkform">
            <input  maxlength="35" id="djtalkval" style="border: none; font-size: 20px;" placeholder="What's the wave..." class="ghost-input"></input>
          </form>
        <div class="modal-footer"  style="background-color: #1E1D1D">
          <h1 id="djtalk" class="text-center text small boxed raise" style="width: 20%; " data-dismiss="modal">Submit</h1>
        </div>
      </div>
    </div>
  </div>

  <!-- <div class="modal fade" id="passDJ" tabindex="-1" role="dialog" aria-labelledby="passDJ" aria-hidden="true" style="background-color: #1E1D1D">
    <div class="modal-dialog" role="document"  style="background-color: #1E1D1D">
      <div>
        <h2 class="modal-title text-center standard-text" id="exampleModalLongTitle">Pass the batton.</h2>
        <input autocomplete="off" id="myInput" style="font-size: 20px;"  placeholder="Search for users here..." class="text-center ghost-input" id="myInput" onkeyup="searchFunction()" autocomplete="off"></input>
        </div>
        <div id="potentialDJS"></div>
    </div>
    </div>
  </div> -->




</div>

<!-- <script src="/static/dj.js"></script> -->
<script type="text/javascript">
//jay
  var djRefreshToken = '{{room.djRefreshToken}}';
  console.log("djrefresh token", djRefreshToken);
  var roomId = '{{room._id}}';
  console.log("roomId", roomId);
  var roomName = '{{room.roomName}}';
  console.log("roomName", roomName);
  var socket = io();
  var clearId = -1;

  /* happens before refresh or close tab */
  /* add logic for safari*/
  $(window).bind('beforeunload', function(){
    console.log("before unloading");
    return null;
    // return "Are you sure you want to leave? This will take you to home page";
  });

  /* after refresh or close tab*/
  $(window).on("unload", function(){
    console.log("unloading");
    socket.emit('specialClose', {"roomName": roomName, "roomId": roomId});
    clearInterval(clearId);
    localStorage.setItem("closing", "true");
  });

  /* Checking connnection to socket */
  socket.on('connect', function(){
    console.log('Connected!');

    clearId = setInterval(function () {
      socket.emit("toRefresh", localStorage.getItem("refreshToken"));
    }, 30*60000);

    if(localStorage.getItem('closing') === "true"){
      window.location.href = '/';
    }else{
      //socket.emit('spotifySetup', localStorage.getItem("spotifyId"));
      var djObject = {
        roomName: roomName,
        accessToken: localStorage.getItem('accessToken')
      }
      socket.emit('createRoom', djObject);
    }
  })

  /* Setting refresh token in localStorage and calling setInterval every 30 mins to refresh */
  socket.on('setRefreshToken', function(refreshToken){
    localStorage.setItem('refreshToken', refreshToken);

  });

  /* Setting access token in localStorage */
  socket.on('setAccessToken', function(accessToken){
    localStorage.setItem('accessToken', accessToken);
    var djObject = {
      roomName: roomName,
      accessToken: localStorage.getItem('accessToken')
    }
    socket.emit('createRoom', djObject);
  })

  /* sets new access token after refresh */
  socket.on('setNewAccessToken', function(accessToken){
    localStorage.setItem('accessToken', accessToken);
    socket.emit('changeRoomToken', {roomName: roomName, newToken: accessToken});
  })

  /* some other user has left room */
  socket.on('userLeaving', function(userSpotifyId){
      console.log(userSpotifyId);
      $('#' + userSpotifyId).remove();
  });

  /* listens to flames in room */  socket.on('laflame', function() {
    $('#flames').append(`
        <span class="small fire" style="position: absolute; left:${Math.floor(100 * Math.random())}%">
            üî•
        </span>
      `)
      setTimeout(function() {
        $('#flames').find('span:first').remove();
      }, 2000)
  })

  /* listens to requests in room */
  socket.on('userTalk', function(data){
    console.log("**********", data);
    $('#flames').append(`
      <p class="request small text" style="position: absolute; left:${Math.floor(100 * Math.random())}%">
          <span style="width: 30%;">${data}</span>
      </p>
    `)

    setTimeout(function() {
      $('#flames').find('p:first').remove();
    }, 8000)
  });

  /* new user has joined */
  socket.on('userJoined', function(userData){
    console.log("user joined", userData);
    if($('#' + userData.spotifyId).length !== 0){
      console.log("this guy exists");
      return;
    }
    else {
      var data = `<div id="${userData.spotifyId}" >
          <div data-id="${userData.spotifyId}" >
            <img class="raise animated bounceIn grid-item" src="${userData.imageURL}" alt="">
          </div>
      </div>`

      // var randomEmojis = ['üï∫', 'üôè', 'üëæ', 'üöÄ', 'üéµ', 'üé§', 'üéß', 'üéâ', 'üî•', 'üíØ', '‚òÄÔ∏è', 'üåä'];
      // var index = Math.floor(Math.random() * (randomEmojis.length - 2));
      // console.log(index);
      //
      // var potentialDJS = `<div id="${userData.spotifyId}" >
      //     <div data-id="${userData.spotifyId}" >
      //       <h2 class="text grow small raise-user searchUsers">${userData.username}</h2>
      //       <h2 class="text small ">${randomEmojis[index]}</h2>
      //     </div>
      // </div>`
      //
      // $('#potentialDJS').append(potentialDJS);
      // random
      $('#users').append(data);
    }
  });

   /* sends message of dj to room */
  $('#djtalk').on('click', function() {
    var djTalk = $('#djtalkval').val();
    $('#djtalkval').val('');

    $('#flames').append(`
      <p class="request small text" style="position: absolute; color: green; left:${Math.floor(100 * Math.random())}%">
          <span style="width: 50%;">${djTalk}</span>
      </p>
    `)

    setTimeout(function() {
        $('#flames').find('p:first').remove();
      }, 8000)

    socket.emit('djTalk', djTalk);
  });

  $('#djtalkform').on('submit', function(e) {
    e.preventDefault();
    $('#djtalk').click();
  })

  /* dj closes room emits event to server which then kicks people out of the room */
  $('#closeRoom').on('click', function(event){
    console.log("reached front end destination");
    socket.emit('closingRoom', {"roomName": roomName, "roomId": roomId});
    $(window).unbind('beforeunload');
    window.location = $(this).attr('data-url');
  })

  /* sends thanks by dj to room */
  $('#sendgrace').on('click', function() {
    $('#flames').append(`
      <span class="small fire" style="position: absolute; left:${Math.floor(100 * Math.random())}%">
          üôè
      </span>
    `)
    setTimeout(function() {
      $('#flames').find('span:first').remove();
    }, 2000)
    socket.emit('sendgrace');
  })

  socket.on('DJData', function(DJData){
    var songName= DJData.songName;
    $('#currentSong').empty();
    $('#currentSong').append(`<h2 id="currentSong" style="font-size: 14px;" class="text-center standard-text small  no-margin animated fadeIn">Current song is : ${songName}</h2>`)
  });

</script>


<script>
 function searchFunction() {
   // Declare variables
   var input, filter, div, h1, i;
   input = document.getElementById('myInput');
   filter = input.value.toUpperCase();
   div = document.getElementById("potentialDJS");
   h1 = div.getElementsByClassName('searchUsers');
   // Loop through all h1st items, and hide those who don't match the search query
   for (i = 0; i < h1.length; i++) {
     console.log(h1.length);
     if (h1[i].innerHTML.toUpperCase().indexOf(filter) > -1) {
       h1[i].style.display = "";
     } else {
       h1[i].style.display = "none";
     }
   }
 };
 </script>
