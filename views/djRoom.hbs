<style>
@media only screen
and (min-device-width : 320px)
and (max-device-width : 480px) {

#djtalk {
  width: 100% !important;
}
}
</style>

<div>
  <div class="row">
    <div class="col-md-2">
      <h1 data-id="{{room.roomName}}" style="margin-left: 5%; margin-right: 5%;"class="closeRoom text-center text small boxed raise" id="closeRoom" data-url='/closeRoom/{{room.roomName}}?roomId={{room._id}}'>Close</h1>
    </div>
    <div class="col-md-offset-1 col-md-6">
      <h1 class="text-center standard-text middle animated slideInDown">{{room.roomName}}</h1>

      <div id="djphoto" class='center'>
        <img src='{{room.imageURL}}' class="img-responsive animated wobble" style="border-radius: 50%; width: 20%; height: 20%;" >
      </div>
      <h2 id="djstatus" class="text-center standard-text small">You are the DJ</h2>
      <div id="currentSong" class="center">
        <img src="/static/images/loading.gif" class="img-responsive" style="width: 5%; height: 5%;"></img>
      </div>


      <div id="lastSongs" class="center">
      </div>


      <div id="pass" class="center">
        <h1  style="font-size: 10px; margin-top: 1%; cursor: pointer;" class="text-center grow text small" data-toggle="modal" data-target="#passDJ">Pass Aux</h1>
      </div>

    </div>
  </div>
  <h1 class="center text smaller" style="margin-top: 0%; margin-bottom: 0%;">
    Flame count:&nbsp;<p id ="laflamecount">0</p>
  </h1>
  <div class="center">
    <h1 id="shareable" style="font-size: 10px; margin-top: 0%; cursor: pointer;" class="text-center grow text small" data-clipboard-target="#linkHome">Get shareable link</h1>
  </div>
  <div id="sendgrace-container">

    <h1 id="sendgrace" class="center floating pointer" >
      üôè
    </h1>
  </div>
  <div class="center">
    <h1 style=""class="text-center text small boxed raise" data-toggle="modal" data-target="#exampleModalLong">Show Love</h1>
  </div>

    <div class="activeUsersforDJ ">
      <div id="users" class="grid">

      </div>
    </div>

  <div class="center" id="flames"></div>

  <div class="modal fade" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true" style="background-color: #1E1D1D">
    <div class="modal-dialog" role="document"  style="background-color: #1E1D1D">
      <div>
        <div class="modal-header" style="background-color: #1E1D1D">
          <h2 class="modal-title text-center standard-text" id="exampleModalLongTitle">Show your listeners some love</h2>
        </div>
          <form autocomplete="off" id="djtalkform">
            <input  maxlength="35" id="djtalkval" style="border: none; font-size: 20px;" placeholder="What's the wave..." class="ghost-input"></input>
          </form>
        <div class="modal-footer"  style="background-color: #1E1D1D">
          <h1 id="djtalk" class="text-center text small boxed raise" style="width: 20%; " data-dismiss="modal">Submit</h1>
        </div>
        <div id="lastSongs" class="center">
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="passDJ" tabindex="-1" role="dialog" aria-labelledby="passDJ" aria-hidden="true" style="background-color: #1E1D1D">
    <div class="modal-dialog" role="document"  style="background-color: #1E1D1D">
      <div>
        <h2 class="modal-title text-center standard-text" id="exampleModalLongTitle">Pass the aux.</h2>
        <input onfocus="this.placeholder = ''" autocomplete="off" id="myInput" style="font-size: 20px;"  placeholder="Search for users here..." class="text-center ghost-input" id="myInput" onkeyup="searchFunction()" autocomplete="off"></input>
        </div>
        <div id="potentialDJS"></div>
    </div>
    </div>
  </div>
<h1 id="linkHome" style="opacity: 0;"></h1>


<script type="text/javascript">

var djRefreshToken = '{{room.djRefreshToken}}';
var roomId = '{{room._id}}';
var roomName = '{{room.roomName}}';
var socket = io();
var clearId = -1;
var isDJ = true;
var userDJSpotifyId = '';
var unload = 0; // set to 1 when refresh or duplicated tab is closing so that specialClose does not happen...
new Clipboard('#shareable');


var isSafari = navigator.vendor && navigator.vendor.indexOf('Apple') > -1 &&
                  navigator.userAgent && !navigator.userAgent.match('CriOS');


if(isSafari){
  $(window).ready(function(){
  //  console.log("test");
    if (window.history && window.history.pushState) {
      $(window).on('popstate', function() {
        var hashLocation = location.hash;
        var hashSplit = hashLocation.split("#!/");
        var hashName = hashSplit[1];
        if (hashName !== '') {
          var hash = window.location.hash;
          if (hash === '') {
            //console.log("unloading safari");
            socket.emit('specialClose', {"roomName": roomName, "roomId": roomId, spotifyId:localStorage.getItem('spotifyId')});
            clearInterval(clearId);
            localStorage.setItem("closing", "true");
            window.location.href = '/';
          }
        }
      });
    window.history.pushState('forward', null, './#forward');
    }
  });
}
else {
  /* happens before refresh or close tab */
  /* add logic for safari*/
  $(window).bind('beforeunload', function(){
    //console.log("before unloading");
    return null;
    // return "Are you sure you want to leave? This will take you to home page";
  });

  /* after refresh or close tab*/
  $(window).on("unload", function(){
    if(localStorage.getItem('closing') === 'false' && unload === 0){
      socket.emit('specialClose', {"roomName": roomName, "roomId": roomId, spotifyId: localStorage.getItem('spotifyId')});
      localStorage.setItem("closing", "true");
      localStorage.setItem('active', 'false');
      clearInterval(clearId);
    }
  });
}


/* Checking connnection to socket */
socket.on('connect', function(){

  //console.log('Connected!');
  if(localStorage.getItem('active') === 'true'){
    unload = 1;
    window.location.href = '/multipleTabs';
  }
  else {
    clearId = setInterval(function () {
      socket.emit("toRefresh", localStorage.getItem("refreshToken"));
    }, 20*60000);

    if(localStorage.getItem('closing') === 'true'){
      unload = 1;
      window.location.href = '/';
    }
    else{
      socket.emit('active',localStorage.getItem('spotifyId'));
      localStorage.setItem('active', 'true');
      var djObject = {
        roomName: roomName,
        accessToken: localStorage.getItem('accessToken')
      }
      socket.emit('createRoom', djObject);
    }
  }

})

socket.on('disconnect', function(){
  console.log("herrererereerere");
  window.location.href = '/error';
})

/* sets new access token after refresh */
socket.on('setNewAccessToken', function(accessToken){
  localStorage.setItem('accessToken', accessToken);
  if(isDJ === true){
    socket.emit('changeRoomToken', {roomName: roomName, newToken: accessToken});
  }
  else{
    //look who dj is get his sptofiy id, get his accesstoken from database and set it to room;
    //figure out time difference
    socket.emit('changeRoomTokenDJUser', {spotifyId:userDJSpotifyId, roomName:roomName});
  }
})

/* some other user has left room */
socket.on('userLeaving', function(userSpotifyId){
  //  console.log(userSpotifyId);
    $('#' + userSpotifyId).remove();
    $(`.djparent[data-id=${userSpotifyId}]`).remove();
});

/* listens to flames in room */
socket.on('laflame', function(count) {
  $('#laflamecount').text(parseInt(count));
  $('#flames').append(`
      <span class="small fire" style="position: absolute; left:${Math.floor(100 * Math.random())}%">
          üî•
      </span>
    `)

})

/* listens to requests in room */
socket.on('userTalk', function(data){
  //console.log("**********", data);
  $('#flames').append(`
    <p class="request small text" style="position: absolute; left:${Math.floor(100 * Math.random())}%">
        <span style="width: 30%;">${data}</span>
    </p>
  `)

  setTimeout(function() {
    $('#flames').find('p:first').remove();
  }, 8000)
});

/* new user has joined */
socket.on('userJoined', function(userData){
  //console.log("user joined", userData);
  if($('#' + userData.spotifyId).length !== 0){
  //  console.log("this guy exists");
    return;
  }
  else {
    var data = `<div id="${userData.spotifyId}" >
                  <div data-id="${userData.spotifyId}" >
                    <img class="raise animated bounceIn grid-item" src="${userData.imageURL}" alt="">
                  </div>
              </div>`

    $('#users').append(data);

    //pass dj functionality

   var randomEmojis = ['üï∫', 'üôè', 'üëæ', 'üöÄ', 'üéµ', 'üé§', 'üéß', 'üéâ', 'üî•', 'üíØ', '‚òÄÔ∏è', 'üåä'];
   var index = Math.floor(Math.random() * (randomEmojis.length - 2));
   //console.log(index);

  var potentialDJS = `<div data-id="${userData.spotifyId}" class="djparent">
                          <h2 data-dismiss="modal" class="text grow small raise-user searchUsers nextDJ" data-id="${userData.spotifyId}">${userData.username}</h2>
                          <h2 class="text small ">${randomEmojis[index]}</h2>
                      </div>`

  $('#potentialDJS').append(potentialDJS);

  }
});


////////////////////

/* passed dj to some other user voluntarily*/
$(document).on('click', '.nextDJ', function(){
  var nextDJSpotifyId = $(this).attr('data-id');
  socket.emit('passDJ', {nextDJSpotifyId: nextDJSpotifyId});
  isDJ = false;
})

/* passed dj to some other user voluntarily */
socket.on('changedDJ', function(djObject){
  userDJSpotifyId = djObject.spotifyId;
  $('#djstatus').text(`Aux passed to ${djObject.username}`);
  $('#pass').empty();
  $('#pass').append(`<h1 style="font-size: 10px; margin-top: 1%; cursor: pointer;" class="text-center grow text small" id="takeback">Take aux back</h1>`)
})

/* taken back aux voluntarily */
$(document).on('click', '#takeback', function(){
  socket.emit('takeBack', localStorage.getItem('accessToken'));
  isDJ = true;
})

/* called whenver host gets back aux
   1. user leaves by clicking button
   2. host takes aux back
   3. user refreshes or closes tab
*/
socket.on('takeBack', function(){
  isDJ = true;
  $('#djstatus').text(`You are the DJ`);
  $('#pass').empty();
  $('#pass').append(`<h1  style="font-size: 10px; margin-top: 1%; cursor: pointer;" class="text-center grow text small" data-toggle="modal" data-target="#passDJ">Pass Aux</h1>`)
})

/* called when specialLeave of user -> calls above takeBack  */
socket.on('DJTakeBack', function(){
  isDJ = true;
  socket.emit('takeBack', localStorage.getItem('accessToken'));
})

/////////////////////

$('#shareable').on('click', function() {
  $('#shareable').text('Copied!');
  var link = window.location.href;
  var linkArr = link.split('/');
  linkArr[3] = 'userRoom';
  var newLink = linkArr.join('/');
  $('#linkHome').text(newLink)

})


 /* sends message of dj to room */

$('#djtalk').on('click', function() {
  var djTalk = $('#djtalkval').val();
  $('#djtalkval').val('');

  $('#flames').append(`
    <p class="request small text" style="position: absolute; color: green; left:${Math.floor(100 * Math.random())}%">
        <span style="width: 50%;">${djTalk}</span>
    </p>
  `)

  setTimeout(function() {
      $('#flames').find('p:first').remove();
    }, 8000)

  socket.emit('djTalk', djTalk);
});

$('#djtalkform').on('submit', function(e) {
  e.preventDefault();
  $('#djtalk').click();
})

/* dj closes room emits event to server which then kicks people out of the room */
$('#closeRoom').on('click', function(event){
  console.log("reached front end destination");
  localStorage.setItem('closing', 'true');
  localStorage.setItem('active', 'false');
  clearInterval(clearId);
  socket.emit('closingRoom', {"roomName": roomName, "roomId": roomId, spotifyId: localStorage.getItem('spotifyId')});
  $(window).unbind('beforeunload');
  window.location = $(this).attr('data-url');
})

/* sends thanks by dj to room */
$('#sendgrace').on('click', function() {
  $('#flames').append(`
    <span class="small fire" style="position: absolute; left:${Math.floor(100 * Math.random())}%">
        üôè
    </span>
  `)

  socket.emit('sendgrace');
})

/* if aux is passed change stuff for host accordingly */
socket.on('DJData', function(DJData){
  if(!isDJ){

    var timeProgress = DJData.timeProgress;
    var songURI = DJData.songURI;

    $.ajax({
      url: 'https://api.spotify.com/v1/me/player/play',
      method: 'PUT',
      headers: {
        'Authorization': 'Bearer ' + localStorage.getItem("accessToken"),
        'Content-Type': "application/json"
      },
      data: JSON.stringify({
        "uris": [songURI]
      }),
      dataType: "JSON",
      success: function(data){
        $.ajax({
          url: `https://api.spotify.com/v1/me/player/seek?position_ms=${timeProgress}`,
          headers: {
              'Authorization': 'Bearer ' + localStorage.getItem("accessToken")
            },
          method: 'PUT',
          json: true,
          success: function (something) {
            //  console.log("song successfully changed or modified");
          }
        })
      }
    })

  }
  var songName= DJData.songName;
  $('#currentSong').empty();
  $('#currentSong').append(`<h2 id="currentSong" style="font-size: 14px;" class="text-center standard-text small  no-margin animated fadeIn">Currently playing : ${songName}</h2>`);
})


</script>


<script>
 function searchFunction() {
   // Declare variables
   var input, filter, div, h1, i;
   input = document.getElementById('myInput');
   filter = input.value.toUpperCase();
   div = document.getElementById("potentialDJS");
   h1 = div.getElementsByClassName('searchUsers');
   // Loop through all h1st items, and hide those who don't match the search query
   for (i = 0; i < h1.length; i++) {
     //console.log(h1.length);
     if (h1[i].innerHTML.toUpperCase().indexOf(filter) > -1) {
       h1[i].style.display = "";
     } else {
       h1[i].style.display = "none";
     }
   }
 };
 </script>
